///////////////////////////////////////////////////////////
//  Player.cs
//  Implementation of the Class Player
//  Generated by Enterprise Architect
//  Created on:      28-Apr-2014 10:13:37 PM
//  Original author: Gsimmons
///////////////////////////////////////////////////////////

using System;
using System.Collections;
using System.Collections.Generic;

namespace Mazegame.Entity {
	public class Player : Character {

        private Location currentLocation;
        private Item currentItem;
        private Dictionary<string, Item> equippedItem;

	    public Player()
	    {
	    }

	    public Player(String name, int lifePoints) : base(name, lifePoints)
		{
            equippedItem = new Dictionary<string, Item>();
		}

        public void equippItem(Item theItem)
        {
            equippedItem[theItem.GetLabel()] = theItem;
        }

        public Item unEquipItem(string itemName)
        {
            Item theItem = null;
            
            if (equippedItem.ContainsKey(itemName))
            {
                theItem = equippedItem[itemName];
                equippedItem.Remove(itemName);
            }
            return theItem;
        }

        public Dictionary<string, Item> getEquippedItem()
        {
            return equippedItem;
        }
        public void setCurrentLocation(Location currentLocation)
        {
            this.currentLocation = currentLocation;
        }

        public Location getCurrentLocation()
        {
            return currentLocation;
        }

        public void setItem(Item currentItem)
        {
            this.currentItem = currentItem;
        }

        public Item getItem()
        {
            return currentItem;
        }

        public bool IsValidArmorName(String name, Item a)
        {
            Boolean found = false;
            
            if (this.GetInventory().ContainsItem(name))
            {
                if (a is Armor)
                {
                    a = (Armor)this.GetInventory().getItem()[name];
                }
                if (a is Weapon)
                {
                    a = (Weapon)this.GetInventory().getItem()[name];
                }
                found = true;
            }
            return found;
 
        }



	}//end Player

}//end namespace Entity