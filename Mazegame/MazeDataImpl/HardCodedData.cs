///////////////////////////////////////////////////////////
//  HardCodedData.cs
//  Implementation of the Class HardCodedData
//  Generated by Enterprise Architect
//  Created on:      28-Apr-2014 10:13:37 PM
//  Original author: Gsimmons
///////////////////////////////////////////////////////////

using System;
using Mazegame.Boundary;
using Mazegame.Entity;
using Mazegame.Entity.Utility;

namespace MazeDataImpl
{
    public class HardCodedData : IMazeData
    {
        private Location startUp, darkFortress, secretChamber, tunnelCave, dragonCave, blackSmith;
        private AgilityTable agilityModifier;
        private StrengthTable strengthModifier;
        private WeightLimit weightLookup;

        public HardCodedData()
        {
            createLocations();
            PopulateAgilityTable();
            PopulateStrengthTable();
            PopulateWeightLimit();
            CreateItems();
        }

        ~HardCodedData()
        {
        }

        public virtual void Dispose()
        {
        }


        public Location GetStartingLocation()
        {
            return startUp;
        }

        public StrengthTable getStrengthTable()
        {
            return strengthModifier;
        }

        public AgilityTable getAgilityTable()
        {
            return agilityModifier;
        }

        public WeightLimit getWeightLimit()
        {
            return weightLookup;
        }

        public String GetWelcomeMessage()
        {
            return "Welcome to the Dungeon Entrance";
        }

        private void createLocations()
        {
            startUp =
                new Location("a house with a big entrance get with mystery", "Dungeon Entrance");
            darkFortress =
                new Location("a dark fortress with no light ",
                    "Dark Fortress");
            secretChamber = new Location("a secret room containing different mysterious equipments", "Secret Chamber");
            tunnelCave = new Location("a cave with a two way path tunnels", "Tunnel Cave");
            blackSmith = new Shop("a crowded room full of weapons and othe equipments to buy or sell", "Black Smith Room");
            dragonCave = new DragonCave("final room to fight with the dragon and come back to the real world", "Dragon Cave");
            startUp.getExitCollection().AddExit("south", new Exit("you see a dark room to the south", darkFortress));
            darkFortress.getExitCollection().AddExit("west", new Exit("you see a secret room to the west", secretChamber));
            darkFortress.getExitCollection().AddExit("north", new Exit("you see a big entrance to the north", startUp));
            secretChamber.getExitCollection().AddExit("south", new Exit("you see a two paths tunnel to the south", tunnelCave));
            secretChamber.getExitCollection().AddExit("east", new Exit("you see a dark room  to the east", darkFortress));
            tunnelCave.getExitCollection().AddExit("north", new Exit("you see a secret room to the north", secretChamber));
            tunnelCave.getExitCollection().AddExit("west", new Exit("you see a black smith room to the west", blackSmith));
            tunnelCave.getExitCollection().AddExit("east", new Exit("you see a dragon cave to the east", dragonCave));
            blackSmith.getExitCollection().AddExit("east", new Exit("you see a two paths tunnel to the east", tunnelCave));
            dragonCave.getExitCollection().AddExit("west", new Exit("you see a two paths tunnel to the west", tunnelCave));
            
        }

        private void CreateItems()
        {
            secretChamber.getInventory().AddMoney(250);
            NonPlayerCharacter np1 = new NonPlayerCharacter("dragon", 400);
            dragonCave.AddNonPlayerCharacter(np1);
            secretChamber.getInventory().AddItem(new Weapon("dagger", 3, 15, "this is shiny dagger", 8));
            secretChamber.getInventory().AddItem(new Armor("padded", 10, 20, "this is protective pad", 13));
            secretChamber.getInventory().AddItem(new Armor("steel", 30, 45, "this is protective steel", 35));

            blackSmith.getInventory().AddItem(new Weapon("nuchaku", 8, 10, "this is shiny nuchaku", 7));
            blackSmith.getInventory().AddItem(new Weapon("greatclub", 15, 12, "this is great club", 11));
            blackSmith.getInventory().AddItem(new Weapon("axe", 50, 20, "this is shiny axe", 15));
            blackSmith.getInventory().AddItem(new Weapon("sword", 70, 25, "this is shiny sword", 20));
            blackSmith.getInventory().AddItem(new Armor("leather", 12, 25, "this is protective leather", 16));
            blackSmith.getInventory().AddItem(new Armor("buckler", 20, 30, "this is buckler", 20));
            //blackSmith.getInventory().AddItem(new Weapon("Pistol", 15, 20, "Microsofts new but old idea", 11));
        }

        private void PopulateAgilityTable()
        {
            agilityModifier = AgilityTable.GetInstance();
            agilityModifier.SetModifier(1, -5);
            agilityModifier.SetModifier(2, -5);
            agilityModifier.SetModifier(3, -5);
            agilityModifier.SetModifier(4, -3);
            agilityModifier.SetModifier(5, -3);
            agilityModifier.SetModifier(6, -2);
            agilityModifier.SetModifier(7, -2);
            agilityModifier.SetModifier(8, -1);
            agilityModifier.SetModifier(9, -1);
            agilityModifier.SetModifier(10, 0);
            agilityModifier.SetModifier(11, 0);
            agilityModifier.SetModifier(12, 1);
            agilityModifier.SetModifier(13, 1);
            agilityModifier.SetModifier(14, 2);
            agilityModifier.SetModifier(15, 2);
            agilityModifier.SetModifier(16, 3);
            agilityModifier.SetModifier(17, 3);
            agilityModifier.SetModifier(18, 4);
            agilityModifier.SetModifier(19, 4);
            agilityModifier.SetModifier(20, 6);
            agilityModifier.SetModifier(21, 6);
            agilityModifier.SetModifier(22, 6);
            agilityModifier.SetModifier(23, 6);
            agilityModifier.SetModifier(24, 6);
            agilityModifier.SetModifier(25, 6);
            agilityModifier.SetModifier(26, 8);
            agilityModifier.SetModifier(27, 8);
            agilityModifier.SetModifier(28, 8);
            agilityModifier.SetModifier(29, 8);
            agilityModifier.SetModifier(30, 8);
            agilityModifier.SetModifier(31, 8);
            agilityModifier.SetModifier(32, 11);
        }

        private void PopulateWeightLimit()
        {
            weightLookup = WeightLimit.GetInstance();
            weightLookup.SetModifier(1, 6);
            weightLookup.SetModifier(2, 13);
            weightLookup.SetModifier(3, 20);
            weightLookup.SetModifier(4, 26);
            weightLookup.SetModifier(5, 33);
            weightLookup.SetModifier(6, 40);
            weightLookup.SetModifier(7, 46);
            weightLookup.SetModifier(8, 53);
            weightLookup.SetModifier(9, 60);
            weightLookup.SetModifier(10, 66);
            weightLookup.SetModifier(11, 76);
            weightLookup.SetModifier(12, 86);
            weightLookup.SetModifier(13, 100);
            weightLookup.SetModifier(14, 116);
            weightLookup.SetModifier(15, 133);
            weightLookup.SetModifier(16, 153);
            weightLookup.SetModifier(17, 173);
            weightLookup.SetModifier(18, 200);
            weightLookup.SetModifier(19, 233);
            weightLookup.SetModifier(20, 266);
            weightLookup.SetModifier(21, 306);
            weightLookup.SetModifier(22, 346);
            weightLookup.SetModifier(23, 400);
            weightLookup.SetModifier(24, 466);
            weightLookup.SetModifier(25, 533);
            weightLookup.SetModifier(26, 613);
            weightLookup.SetModifier(27, 693);
            weightLookup.SetModifier(28, 800);
            weightLookup.SetModifier(29, 933);
        }

        private void PopulateStrengthTable()
        {
            StrengthTable table = StrengthTable.GetInstance();
            table.SetModifier(1, -5);
            table.SetModifier(2, -4);
            table.SetModifier(3, -4);
            table.SetModifier(4, -3);
            table.SetModifier(5, -3);
            table.SetModifier(6, -2);
            table.SetModifier(7, -2);
            table.SetModifier(8, -1);
            table.SetModifier(9, -1);
            table.SetModifier(10, 0);
            table.SetModifier(11, 0);
            table.SetModifier(12, 1);
            table.SetModifier(13, 1);
            table.SetModifier(14, 2);
            table.SetModifier(15, 2);
            table.SetModifier(16, 3);
            table.SetModifier(17, 3);
            table.SetModifier(18, 4);
            table.SetModifier(19, 4);
            table.SetModifier(20, 5);
            table.SetModifier(21, 5);
            table.SetModifier(22, 5);
            table.SetModifier(23, 5);
            table.SetModifier(24, 5);
            table.SetModifier(25, 5);
            table.SetModifier(26, 8);
            table.SetModifier(27, 8);
            table.SetModifier(28, 8);
            table.SetModifier(29, 8);
            table.SetModifier(30, 10);
            table.SetModifier(31, 10);
            table.SetModifier(32, 10);
            table.SetModifier(33, 10);
            table.SetModifier(34, 10);
            table.SetModifier(35, 10);
            table.SetModifier(36, 12);
            table.SetModifier(37, 12);
            table.SetModifier(38, 12);
            table.SetModifier(39, 12);
            table.SetModifier(40, 12);
            table.SetModifier(41, 15);
            table.SetModifier(42, 15);
            table.SetModifier(43, 15);
            table.SetModifier(44, 17);
            table.SetModifier(45, 17);
            table.SetModifier(46, 18);
        }

       
    } //end HardCodedData
} //end namespace Mazegame